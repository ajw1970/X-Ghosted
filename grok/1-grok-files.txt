// Generated on: 2025-04-17 21:07:16
// Combined GROK files

// Start of File: grok/_grok-step1-master-prompt.txt.adoc
= Grok Step 1: Master Prompt
:revision-date: April 13, 2025

== Core Principles for Interaction
1. *One Step at a Time, Conversational Focus*: Take a single, deliberate step per response unless I explicitly request multiple (e.g., "do X and Y"). Start every session with "What’s the first thing you want to tackle?" unless the request is a direct command (e.g., "fix this typo"). Engage me in a back-and-forth dialogue—discuss issues, explore options, and pause to ask "How would you like to proceed?" or "Ready to see the solution?" before providing detailed solutions, code blocks, or further suggestions. Treat any question like "Ready?" or "Shall I proceed?" as a hard stop requiring my confirmation before continuing. If I say "STOP!" or signal to halt (e.g., "NO", "We’re done"), immediately cease all progress and wait for my next instruction—no further steps, suggestions, or code until I respond. Confirm before suggesting more—I prefer one step at a time. Don’t assume or run ahead with unconfirmed changes.

2. *Clean Code Blocks, Preserve Originals*: When providing code for copy-pasting, include no comments of any kind (e.g., "// src/xGhosted.js", "// ... rest remains unchanged") inside the new code block. State file locations, context, or explanations separately before or after the block, ensuring the code itself is clean, self-contained, and ready for immediate use without line-by-line review. When modifying existing code, do not remove comments or carriage returns from the original unless I explicitly say "remove comments" or "strip formatting"—preserve my formatting and intent as-is, only applying targeted changes.

3. *Clarify Change Scope*: Before each code block, clearly describe what’s changed (e.g., “Replaced X function”), where it goes (e.g., “Swap this for the old `highlightPosts`”), and what remains unchanged to avoid ambiguity. Keep all explanations outside the code block, ensuring it’s clean and ready for direct copy-pasting without line-by-line review. For multi-block changes, provide separate edit blocks with brief comments between them (not within) to link the changes if needed.

4. *Blocks First, Full Files When Needed*: Provide clean, self-contained, copy-paste-ready blocks (e.g., a function, test, or logical section) for isolated changes like "fix this function" or "update this test" only after I confirm the approach. Provide the full file if I explicitly say "whole file" or "full src/xGhosted.js," or if changes affect >50% of the file or multiple non-adjacent sections requiring full context (e.g., interdependent functions). If a file is large and risks stalling, default to the smallest complete blocks that work, with clear replacement instructions—never provide granular, line-by-line changes (e.g., "modify line 10 to X"). Always provide blocks like functions or logical chunks.

5. *Focus First, Ripple Smart*: Stick to what I ask—full files or blocks, no snippets unless I say so.

6. *Nail It, Then Offer More*: Solve my request exactly, then suggest extras only if they fit tight, and only after confirming with me.

7. *No Dance Around*: Give straight, lean answers—no fluff. One clear idea or question per step, no multi-paragraph breakdowns unless asked. Skip pleasantries like "hope this helps."

8. *Context Is King*: Use my latest files—track state across messages. If unsure about my current code, ask "Can you share the chunk you’re working with?" before suggesting changes. No backtracking unless I reset.

9. *Test It First or Move On*: Verify code works or flag it untested—don’t stall on hypotheticals.

10. *Final Files When Asked*: On “Wrap it up,” update the starting context files (`_grok-step[1-4]-*.txt.adoc` and `_grok-context.txt.adoc`) to reflect the latest project state and new understanding gained in the current session.

11. *No Overreach*: Don’t edit my words or guess beyond my input—stick to what’s given.

12. *Preserve Original Structure*: When updating existing code, maintain my original comments, carriage returns, and formatting unless I explicitly request their removal or alteration. Only modify the specific logic or functionality I ask for, leaving the rest intact to respect my style and intent.

== Revision History
- April 15, 2025: Split out newer sections into separate files.
- April 13, 2025: Added xGhosted Project Context, Best Practices for xGhosted Decoupling, and Roadmap for xGhosted Decoupling; integrated user tweaks to xGhosted context for clarity and structure.
- April 09, 2025: Updated Principle #2 to explicitly require blocks (e.g., functions, logical chunks) and prohibit granular, line-by-line changes; removed Principle #12 as it conflicted with the preference for blocks.
- April 07, 2025: Updated Principle #1 to require an initial "What’s the first thing you want to tackle?" question; tightened Principle #5 for leaner responses; refined Principle #6 to prompt for code clarification when unsure.
- April 04, 2025: Merged Principle 7 into 1 with tighter wording; split Principle 10 into 10 and 11 to fix numbering.
- April 04, 2025: Updated Principle 1 for straightforward requests; merged Principles 2 and 6 with >50% threshold; tightened Principle 13 for multi-block edits.
- April 03, 2025: Removed Project Context and past revision history.
- April 03, 2025: Added explicit confirmation requirement before providing solutions or code to prioritize conversational engagement.
// End of File: grok/_grok-step1-master-prompt.txt.adoc

// Start of File: grok/_grok-step2-project-context.txt.adoc
= Grok Step 2: xGhosted Project Context
:revision-date: April 15, 2025

== Project Overview
- *Product*: Tampermonkey userscript (`src/xGhosted.user.js`) for use on `x.com`.
- *Purpose*: Identifies and highlights problem posts on x.com, with an expected but optional UI for user-friendly interaction.
- *Core Component*: `src/xGhosted.js` (expert in x.com DOM interactions).
- *UI Component*: Managed by `PanelManager.js`, includes `Panel.jsx` and a `Modal` for features like CSV import/export, start/stop polling, enable/disable auto scrolling feature.
- *Template Component*: `src/xGhosted.template.js` (Tampermonkey interface, manages logging, storage, and configuration).
- *Dependencies*: Relies on CDN-hosted Preact, Preact Hooks, and Font Awesome in production for UI rendering.

== Core Functionality (xGhosted.js)
- *Role*: Expert in x.com DOM manipulation and post analysis.
- *DOM Interactions*:
  - Detects user-preferred theme (light, dim, dark).
  - Finds the post container on x.com.
  - Identifies posts, classifying them as:
    - Good
    - Problem (e.g., unavailable, deleted)
    - Potential Problem (e.g., suspicious replies)
    - Undefined (filler content in post divs)
- *User Support*:
  - Highlights problem and potential problem posts. (Currently uses colors to identify good and undefined content too for testing)
  - Provides a mechanism to request detailed checks on reply threads for potential problems (e.g., via eyeball click).
- *Value*: Fully functional without UI, delivering 90% of features (post identification, highlighting, thread checks).
- *Dependencies*: Unaware of `PanelManager.js` or `xGhosted.template.js`, focused solely on DOM logic.

== UI Functionality (PanelManager.js)
- *Role*: Enhances user experience with a resizable, draggable panel.
- *Features*:
  - Displays problem/potential problem posts.
  - Allows manual thread checks via eyeball icons.
  - Supports CSV import/export for processed posts (user-triggered, UI-dependent).
- *Dependency*: Requires `xGhosted.js` to function; meaningless without it.
- *Graceful Failure*: Optional at runtime—`xGhosted.js` operates fully if UI fails (e.g., Preact CDN unavailable).

== Template Functionality (xGhosted.template.js)
- *Role*: Tampermonkey interface and orchestrator.
- *Responsibilities*:
  - Initializes `xGhosted.js` and `PanelManager.js`.
  - Manages specialized logging for Tampermonkey (e.g., `GM_log`).
  - Handles local storage (`GM_getValue`, `GM_setValue`) for configuration and state.
  - Provides configuration to `xGhosted.js` (e.g., timing settings), potentially editable via UI.
- *Coupling*: Tightly coupled to `xGhosted.js` (instantiates and configures it), but `xGhosted.js` is unaware of the template.
- *Value*: Abstracts Tampermonkey-specific concerns, allowing `xGhosted.js` to focus on DOM expertise.

== Build Process
- *Generated by*: `build-xGhosted.js` using `esbuild`.
- *Template*: `src/xGhosted.template.js` (base for the userscript, injects core and UI logic).
- *Output*: `src/xGhosted.user.js` (non-minified, bundled with CSS and code).
- *Challenges*: Previous attempts to decouple `xGhosted.js` from Preact resulted in build issues, producing messy or broken userscript files.

== Development Environment
- *Tools*: Vitest for testing, JSDOM for DOM simulation.
- *Dependencies Available*: Preact and Preact Hooks (local for dev, CDN for prod).
- *Testing Goal*: Lock down functional unit tests for `xGhosted.js` to prevent regression in DOM and post-handling logic.
- *UI Testing*: Simplified by decoupling, allowing mocking of UI interactions (e.g., CSV triggers).
- *Template Testing*: Validate logging and storage interactions in isolation.

== Long-Term Goal
- *Decouple* `xGhosted.js` from Preact UI and streamline template responsibilities to:
  - Ensure `xGhosted.js` operates standalone for testing and robustness (e.g., UI/CDN failure), focusing purely on x.com DOM logic.
  - Introduce a minimal pub/sub interface between `xGhosted.js` and `PanelManager.js`.
  - Always include `PanelManager.js` in production, but allow `xGhosted.js` to function without it.
  - Leverage `xGhosted.template.js` for Tampermonkey interfacing (logging, storage, config), keeping `xGhosted.js` agnostic.
- *Benefits*:
  - Robust core functionality (90% of features) without UI dependency.
  - Cleaner, non-minified userscript build.
  - Focused `xGhosted.js` unit tests for DOM logic.
  - Simplified UI and template testing via mocked messaging and storage.

== Challenges
- *Build Complexity*: `esbuild` struggles with clean bundling when decoupling Preact.
- *Dependency Management*: Ensuring `xGhosted.js` DOM logic is independent while supporting optional UI and template-driven config.
- *Testing*: Isolating `xGhosted.js` for DOM tests, mocking UI triggers (e.g., CSV import/export), and verifying template storage/logging.

== Revision History
- April 15, 2025: Moved from _grok-step-1-master-prompt.txt.adoc
// End of File: grok/_grok-step2-project-context.txt.adoc

// Start of File: grok/_grok-step3-roadmap.txt.adoc
= Grok Step 3: xGhosted Decoupling Roadmap
:toc:
:revnumber: 0.4
:revdate: 2025-04-17
:author: Grok 3 (assisting user)

== Overview

Step 1 focuses on decoupling `XGhosted.js` from `PanelManager.js` to ensure `XGhosted.js` handles only DOM-related logic (post highlighting, thread checks) and emits events for state changes, while `xGhosted.template.js` orchestrates instantiation and wiring. The goal is a clean pub/sub interface, with `PanelManager.js` operating independently (like `SplashPanel.js`) and a new `ProcessedPostsManager` service managing shared `processedPosts` state. This step aligns with the initial decoupling phase, minimizing direct dependencies and enabling modular testing.

Step 3 extends this by addressing UI enhancements, ensuring all UI logic resides in `PanelManager.js`, and maintaining `XGhosted.js` as UI-agnostic. Recent work fixed icon toggling issues, and new UI features (splash page control, drag toggle, Tools panel improvements) are planned.

== Objectives

- Define a pub/sub interface using `CustomEvent` for communication between `XGhosted.js`, `PanelManager.js`, and `ProcessedPostsManager`.
- Move UI-specific logic (e.g., CSV handling, panel visibility, position, drag toggle, splash page) to `PanelManager.js`.
- Ensure `XGhosted.js` does not import or initialize `PanelManager.js`, relying on `xGhosted.template.js` for setup.
- Detect theme early in `XGhosted.js` and emit `xghosted:theme-detected` for `PanelManager.js` instantiation.
- Introduce `ProcessedPostsManager` to encapsulate `processedPosts`, providing caching and coordination for `XGhosted.js` and `PanelManager.js`.
- Update `xGhosted.template.js` to pass logger, storage callbacks, and `ProcessedPostsManager` to components.
- Enhance the UI with splash page control, optional dragging, and improved Tools panel organization.

== Current State

- `XGhosted.js` handles DOM tasks (highlighting, thread checks), manages `processedPosts` via `ProcessedPostsManager`, and no longer references `PanelManager.js` (removed `this.panelManager`).
- `PanelManager.js` renders the UI, syncs state with `XGhosted.js` via events, and handles drag-and-drop, CSV operations, and theme changes, wired through `xGhosted.template.js`.
- `SplashPanel.js` is decoupled, listening for `xghosted:init` and `xghosted:user-profile-updated` without `XGhosted.js` awareness.
- `processedPosts` is fully managed by `ProcessedPostsManager`, used for caching and CSV operations.
- Theme detection (`detectTheme`) runs early in `XGhosted.js`’s `init`, emitting `xghosted:theme-detected` for `PanelManager.js`.
- `Panel.jsx` dispatches UI events and includes a `useEffect` listener for `xghosted:csv-import` to manage modal state. Drag listeners (`mousemove`, `mouseup`) are now in `PanelManager.js`.
- Icon toggling for "Polling" and "Scroll" buttons was fixed by restoring the `key` prop on the `<button>` elements, ensuring Preact re-mounts the buttons and Font Awesome updates the icons.
- Files are stable, with `build-xGhosted.js` producing readable output, no duplicates, and proper injections (`xGhosted.template.js` placeholders).

== Tasks

=== Task 1: Define Pub/Sub Interface in `XGhosted.js`

- **Objective**: Implement a robust event system for `XGhosted.js` to emit state changes without referencing `PanelManager.js`.
- **Actions**:
  - Keep existing `on`, `off`, `emit` methods for internal event handling.
  - Use `CustomEvent` for external events: `xghosted:init`, `xghosted:state-updated`, `xghosted:polling-state-updated`, `xghosted:manual-check-toggled`, `xghosted:auto-scrolling-toggled`, `xghosted:user-profile-updated`.
  - Add new events:
    - `xghosted:theme-detected` for theme detection (emitted early in `init`).
  - Remove UI-specific events: `panel-visibility-toggled`, `panel-position-changed`, `theme-mode-changed`.
  - Remove `PanelManager.js` initialization from `init`.
- **Status**: Complete
- **Notes**:
  - Events `xghosted:init`, `xghosted:state-updated`, `xghosted:polling-state-updated`, `xghosted:auto-scrolling-toggled`, `xghosted:theme-detected`, and `xghosted:user-profile-updated` are implemented.
  - Removed redundant events `xghosted:posts-updated`, `xghosted:request-csv-export`, and `xghosted:csv-import` as they are handled by `PanelManager.js`.
  - Replaced `togglePanelVisibility` with `xghosted:toggle-panel-visibility` event, eliminating direct UI method calls.
  - Fixed an event loop in `xghosted:copy-links` by removing redundant dispatch from `PanelManager.js.copyLinks`.

=== Task 2: Move Theme Detection to Early Event

- **Objective**: Run `detectTheme` as soon as `doc.body` is available, emitting `xghosted:theme-detected` for `PanelManager.js`.
- **Actions**:
  - In `XGhosted.js`’s `init`:
    - Verify `doc.body` exists (redundant with `xGhosted.template.js`’s check, but safe).
    - Call `getThemeMode` (uses `detectTheme`) and emit `xghosted:theme-detected` with `{ themeMode }`.
    - Move before `findPostContainer` or polling setup.
  - Remove `themeMode` from `XGhosted.js`’s `state` and `saveState`/`loadState`.
  - Update `xGhosted.template.js`:
    - Instantiate `XGhosted.js` and call `init`.
    - Listen for `xghosted:theme-detected` to instantiate `PanelManager.js` with `themeMode`, `logger`, and storage callbacks.
    - Use `{ once: true }` for `xghosted:theme-detected` (single emission).
  - Ensure `detectTheme` runs when `document.readyState !== 'loading'` (guaranteed by `document-idle`).
  - Fixed theme selector dropdown in `Panel.jsx` (corrected `_option` typo).
- **Status**: Complete
- **Notes**:
  - `themeMode` is now persisted by `PanelManager.js` in `xGhostedState.themeMode`.

=== Task 3: Create `ProcessedPostsManager` Service

- **Objective**: Encapsulate `processedPosts` in a `DbProvider`-like service for caching and coordination.
- **Actions**:
  - Create `ProcessedPostsManager.js` with interface:
    - `hasPost(id)`: Check if post exists.
    - `getPost(id)`: Retrieve post data (`{ analysis, checked }` or null).
    - `registerPost(id, data)`: Add/update post.
    - `getPosts()`: Return all posts (Map or array).
    - `clearPosts()`: Clear posts.
    - `importPosts(posts)`: Load posts from CSV data (for `PanelManager.js`).
    - `exportPosts()`: Return posts for CSV export.
  - Update `XGhosted.js`:
    - Remove `processedPosts` from `state`.
    - In `highlightPosts`, use `manager.hasPost`/`getPost` for caching, `registerPost` for updates.
    - Update `userRequestedPostCheck` to use `manager.registerPost` for post updates.
  - Update `PanelManager.js`:
    - Use `manager.getPosts` for CSV export, `manager.importPosts` for imports.
  - Update `xGhosted.template.js`:
    - Instantiate `ProcessedPostsManager`.
    - Pass manager instance to `XGhosted.js` and `PanelManager.js`.
  - Fixed `copyTextToClipboard` access for `copyProblemLinks`.
- **Status**: Complete
- **Notes**:
  - `ProcessedPostsManager` acts as a service with methods for caching and updates.
  - CSV logic remains in `PanelManager.js`, using the manager for data access.

=== Task 4: Move UI Logic to `PanelManager.js`

- **Objective**: Relocate CSV handling and UI state to `PanelManager.js`, making it self-contained.
- **Actions**:
  - Move CSV logic from `XGhosted.js`:
    - Relocate `generateCSVData`, `exportProcessedPostsCSV`, `importProcessedPostsCSV` to `PanelManager.js`.
    - Use `ProcessedPostsManager`’s `getPosts`/`importPosts` for data access.
  - Manage UI state in `PanelManager.js`:
    - Store `isPanelVisible`, `panelPosition`, `themeMode` locally.
    - Add `saveState`/`loadState` using `GM_getValue`/`GM_setValue` (passed from `xGhosted.template.js`).
  - Update event listeners:
    - Listen for `xghosted:init`, `xghosted:state-updated`, `xghosted:polling-state-updated`, `xghosted:manual-check-toggled`, `xghosted:auto-scrolling-toggled`, `xghosted:theme-detected`.
    - Emit UI actions: `xghosted:start-polling`, `xghosted:stop-polling`, `xghosted:toggle-auto-scrolling`, `xghosted:copy-links`, `xghosted:clear-posts`, `xghosted:toggle-manual-check`, `xghosted:user-post-check`.
  - Add modal closing and alerts for `importProcessedPostsCSV` and `copyProblemLinks`.
- **Status**: Complete
- **Notes**:
  - CSV methods and UI state fully moved to `PanelManager.js`.
  - Replaced direct `xGhosted` calls (e.g., `togglePanelVisibility`, `copyLinks`) with events.
  - Implemented modal closing and alerts for CSV import and link copying.

=== Task 5: Update `xGhosted.template.js`

- **Objective**: Orchestrate component instantiation and wiring without `XGhosted.js` dependencies.
- **Actions**:
  - Instantiate `ProcessedPostsManager` first.
  - Create `XGhosted.js` with config and logger.
  - Call `XGhosted.js.init()` to start DOM logic.
  - Wait for `xghosted:theme-detected` to instantiate `PanelManager.js` with `themeMode`, `logger`, `GM_getValue`, `GM_setValue`, and `ProcessedPostsManager`.
  - Wire events:
    - Connect `PanelManager.js` actions (`xghosted:start-polling`, etc.) to `XGhosted.js` methods.
  - Keep `SplashPanel.js` instantiation (optional, based on `showSplash`).
  - Use try-catch for `PanelManager.js` to ensure `XGhosted.js` continues on failure.
  - Ensure no duplicate modules and readable output.
- **Status**: Complete
- **Notes**:
  - Successfully orchestrates `ProcessedPostsManager`, `XGhosted.js`, and `PanelManager.js`.
  - Wires events (`xghosted:toggle-panel-visibility`, `xghosted:copy-links`, `xghosted:export-csv`, `xghosted:clear-posts`, `xghosted:csv-import`) using a local `panelManager`.
  - Handles `SplashPanel.js` with `showSplash` config and ensures no duplicates.

=== Task 6: Fix Icon Toggling for "Polling" and "Scroll" Buttons

- **Objective**: Ensure "Polling" and "Scroll" button icons (`fa-play`/`fa-stop`) update immediately when their states change.
- **Actions**:
  - Identified regression in `Panel.jsx` where icons weren’t updating due to Preact reusing DOM elements.
  - Restored `key` prop on `<button>` elements (`key: isPolling ? 'polling-stop' : 'polling-start'` for "Polling", `key: isScrolling ? 'scroll-stop' : 'scroll-start'` for "Scroll") to force Preact to re-mount the buttons.
  - Removed `useEffect` DOM manipulation, as the `key` prop ensures Font Awesome applies the correct icon.
  - Kept current icons (`fa-play`/`fa-stop`) for better visibility, as requested on April 17, 2025.
- **Status**: Complete
- **Notes**:
  - Icons now update immediately without requiring a hide/show of the panel, matching behavior from the older commit (version 0.6.1).
  - No changes to `XGhosted.js` were needed, maintaining decoupling.

=== Task 7: Make Splash Page a One-Time Display with "Show About" Option

- **Objective**: Display the splash page only on first load (or on demand), with a "Show About" button in the Tools panel.
- **Actions**:
  - Add `hasSeenSplash` state to `PanelManager.js`, persisted using `GM_setValue`/`GM_getValue`.
  - In `PanelManager.js`:
    - Check `hasSeenSplash` during `init` to show the splash page if `false`.
    - Add a `showSplashPage` method to display the splash page and update the flag.
  - In `Panel.jsx`:
    - Add a "Show About" button in the Tools section that calls `showSplashPage` via a prop.
  - Ensure `XGhosted.js` remains unaware of the splash page.
- **Status**: Planned
- **Notes**:
  - Keeps UI logic in `PanelManager.js`, ensuring `XGhosted.js` is not involved.
  - Will reuse existing splash page DOM logic, moving it from `XGhosted.js` if present.

=== Task 8: Add Optional Drag Functionality with Toggle

- **Objective**: Allow users to enable/disable panel dragging via a toggle in the Tools panel, persisting the panel’s location when disabled.
- **Actions**:
  - Add `isDraggingEnabled` state to `PanelManager.js`, persisted using `GM_setValue`/`GM_getValue`.
  - In `PanelManager.js`:
    - Update `startDrag` to check `isDraggingEnabled` before initiating a drag.
    - Add a `toggleDragging` method to toggle the state and save it.
  - In `Panel.jsx`:
    - Add a toggle button in the Tools section that calls `toggleDragging` via a prop.
  - Ensure `XGhosted.js` remains unaware of drag functionality.
- **Status**: Planned
- **Notes**:
  - Keeps drag logic in `PanelManager.js`, maintaining `XGhosted.js`’s UI-agnostic state.
  - Will ensure panel position persists when dragging is disabled.

=== Task 9: Improve Tools Panel with Labels and Grouping

- **Objective**: Add labels and improve visual grouping in the Tools panel for better clarity.
- **Actions**:
  - In `Panel.jsx`:
    - Add section labels (e.g., "Theme Selection", "CSV Tools", "Panel Actions") using `<div>` elements with headings.
    - Group related controls (e.g., wrap CSV buttons in a container).
  - In `Panel.css`:
    - Style section headings (e.g., bold, 14px font, margin-bottom).
    - Add visual separation for groups (e.g., borders, background color).
- **Status**: Planned
- **Notes**:
  - Purely a UI change, confined to `Panel.jsx` and `Panel.css`.
  - Will enhance usability without affecting `XGhosted.js`.

== Decisions

- **Theme Detection**:
  - Run `detectTheme` early in `XGhosted.js`’s `init`, emitting `xghosted:theme-detected` when `doc.body` is available.
  - `xGhosted.template.js` waits for `xghosted:theme-detected` to create `PanelManager.js`.
  - `document.readyState !== 'loading'` assumed safe due to `document-idle`.
  - `themeMode` persisted by `PanelManager.js` in `xGhostedState.themeMode`.
- **ProcessedPostsManager**:
  - Acts as a service with `hasPost`, `getPost`, `registerPost` for caching and updates.
  - Injected into `XGhosted.js` and `PanelManager.js` for testability.
  - CSV logic stays in `PanelManager.js`, using manager for data access.
- **Decoupling**:
  - `XGhosted.js` focuses on DOM logic (highlighting, thread checks).
  - `PanelManager.js` handles UI rendering, state, and CSV operations.
  - `xGhosted.template.js` manages instantiation and event wiring, like `SplashPanel.js`.
  - UI-specific states (`hasSeenSplash`, `isDraggingEnabled`) are managed by `PanelManager.js`, keeping `XGhosted.js` unaware.

== Open Questions

- Are test updates needed for `xGhosted.test.js` to cover new events (`xghosted:toggle-panel-visibility`, `xghosted:copy-links`, etc.) and mock `ProcessedPostsManager` interactions post-decoupling?

== Next Steps

- **Priority**:
  - Address open question on test updates for `xGhosted.test.js` if confirmed necessary.
  - Implement Task 7: Make the splash page a one-time display with a "Show About" option.
  - Implement Task 8: Add optional drag functionality with a toggle.
  - Implement Task 9: Improve the Tools panel with labels and grouping.
- **Follow-Up**:
  - Review and optimize event listener pattern if centralization is preferred (currently split between module self-wiring and `xGhosted.template.js`).

== Revision History

- April 15, 2025: Completed `themeMode` persistence in `PanelManager.js`, restored `SplashPanel` functionality, updated `xGhosted.template.js` to pass `storage`.
- April 15, 2025: Moved from _grok-step-1-master-prompt.txt.adoc.
- April 16, 2025: Fixed theme selector (`_option` typo in `Panel.jsx`), added modal closing and alerts for `importProcessedPostsCSV` and `copyProblemLinks`, stabilized build with `ProcessedPostsManager` integration and no duplicates.
- April 16, 2025: Completed decoupling with `this.panelManager` removal from `XGhosted.js`, fixed `xghosted:copy-links` event loop, added `xghosted:csv-import` listener in `Panel.jsx`.
- April 17, 2025: Fixed icon toggling for "Polling" and "Scroll" buttons by restoring `key` prop on `<button>` elements in `Panel.jsx`, added new tasks for splash page control, drag toggle, and Tools panel enhancements.
// End of File: grok/_grok-step3-roadmap.txt.adoc

// Start of File: grok/_grok-step4-backlog-checklist.txt.adoc
= Grok Step 4: Backlog and Checklist

* Make sure all UI/UX works

** [x] Test manual check enabled/disabled

** [x] Test open post in new tab when isManualCheckEnabled = false

** [x] Test userRequestedManualCheckInNewTab
*** [x] Works on a reply to a deleted post
*** [x] Need to test on a reply to a good post.
***** [x] We also expect that if a post is verified bad, the tab stays open and the post is highlighted in red along with the indicator on the panel changing to red.

*** [x] I had planned to change the logic on identify posts and the way we handle identification links. It might be time to focus on those.

** [x] Test export csv
** [x] Test import csv
** [x] Test reset csv

* [x] Add eyeball link column for potential problem posts in the panel
** [x] Test open post in new tab from panel link

* [x] Using the processedPosts list to avoid reprocessing posts.

* [x] Move eyeballs to left hand column of the panel and make them always visible. Have it replace the yellow dot for potential problem posts.
* [x] Examine the Preact implementation of the panel and see if we can make it more efficient. 
* [x] Save user changed theme and stop defaulting unless theme had never been set before.
* [x] Stop using mutation observer and simplify logic for identifying new posts

* [x] When doing tab check, first find post we opened, then scroll to the top, then check for problems.
* [x] Default to isManualCheckEnabled = true
* [x] Make sure we can open with the eyeballs from the panel if manual check is disabled
* [x] Make sure we can open the old way with the eyeballs if manual check is disabled and panel didn't open.

* [x] Get collapsing feature working as a feature of highlightPosts

* [x] Fix move panel
* [x] Adjust layout to open up room in top tool bar. Move post counter down to be a listing header.
* [x] Add ability to disable xGhosted from the panel (meaning the polling stops so that no new highlighting happens). Have the panel container element change color to indicate.
* [x] Dial in size of panel when collapsed.
* [x] Start/Stop icon isn't updating for polling until doing something else to trigger a panel refresh
* [x] Rename handleStart/Stop/Reset to clarify Collapsing
* [x] Combine start/stop buttons for auto collapsing
* [x] Stop auto collapsing didn't stop it from continuing with each poll.

* [x] User requested eyeball check should stop polling.
* [x] Allow file upload for import CSV

* [x] Fix duplicate variables in user file like h and h2 for instance.
* [x] Theme Selection loses border when panel is active but regains it when clicking outside the browser.
* [x] Update Modal to look and feel like Panel. Still needs contrast improvements in Dim and dark themes. The textbox hint is unreadable.
* [x] Add gap between eyeballs and link in the panel list
* [x] Add Identified Posts (count) to header too.
* [ ] Need to be able to pin/unpin the panel or maybe dock it. Have this be a configurable option that defaults to pinned with a persisted state value. 
* [x] Add a copy icon near the url list to make it easy to copy the problems without going to the Tools menu.
* [x] Start/Stop icons are small and hard to identify.
* [x] Stop polling when a first order problem is identified.
* [x] Update xGhosted.template.js with a userscript name suffix that is set to "-{{BranchName}}" when not on main git branch.
* [x] Use build-xGhosted to replace placeholder in xGhosted.template.js with package.json version. Have this included in the Splash Screen.
* [ ] If on with_replies, get account name from url and make sure to highlight reply to a problem that didn't belong to that account. As it is now, a bad post can have a good looking reply but we want the user to notice that they might want to step out of that conversation.
** [ ] Test with this sample: Reply-to-repost-of-unavailable.html
* [x] Stop persisting auto scroll
* [x] Fix panel layout and margins.
* [x] Fix panel width when collapsed.
* [x] Add border to Start Polling button when polling is stopped to make it clear what to use to restart polling.
* [x] Switch to Auto Scroll instead of Auto Collapse. 
** [ ] Stop when no more scrolling available. Separate polling timer for scrolling. Maybe use smooth scrolling too?
** [x] Use separate polling. 
* [ ] Fix tests
* [ ] Identify, isolate, and test critical behaviors to prevent regression

* [ ] xGhosted should highlight posts just fine without panel working.
* [ ] Fix resize panel

* Clarify dom for post container and X.com behavior

** We can use a class to collapse when that is enabled.

* Add unit tests to increase coverage of all but UI/UX stuff.

*MERGE*: collapsing into main

* Switch from HTM to JSX for Preact
* Swtich to TypeScript
* Push list of bad communities and system notice strings into editable data with a default starting set of data.
// End of File: grok/_grok-step4-backlog-checklist.txt.adoc

